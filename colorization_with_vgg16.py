# -*- coding: utf-8 -*-
"""Colorization with VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15nkSxCmFdUEGpmnooPvkuh9hQfV2C9jS

Setting Up A Few Things
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/My Drive/Kaggle"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Kaggle

!kaggle datasets download -d shravankumar9892/image-colorization

!unzip -uq "/content/drive/MyDrive/Kaggle/image-colorization.zip" -d "/content/drive/My Drive/Kaggle"

"""Import Libraries"""

from skimage import io, color
import skimage
import matplotlib.pyplot as plt
import cv2
import numpy as np

"""Loading Data"""

gray_scale = np.load('/content/drive/MyDrive/Kaggle/l/gray_scale.npy')[:6000]
ab_scale = np.load('/content/drive/MyDrive/Kaggle/ab/ab/ab1.npy')[:6000]
print(gray_scale.shape)
print(ab_scale.shape)

"""Converting Images in RGB Space"""

def rgb_image(l, ab):
    shape = (l.shape[0],l.shape[1],3)
    img = np.zeros(shape)
    img[:,:,0] = l[:,:,0]
    img[:,:,1:]= ab
    img = img.astype('uint8')
    img = cv2.cvtColor(img, cv2.COLOR_LAB2RGB)
    return img

def display_image(img):
    plt.imshow(img, cmap='gray')
    plt.show()

"""Display Image"""

l_sample,ab_sample = gray_scale[21].reshape((224,224,1)),ab_scale[21]
rgb_sample = rgb_image(l_sample,ab_sample)
display_image(rgb_sample)
display_image(l_sample[:,:,0])

"""Setting Up Input"""

x = np.zeros((6000,224,224,3), dtype='uint8')

for i in range(6000):
    l_sample = (gray_scale[i]).reshape((224,224,1))
    ab_sample = (ab_scale[i])
    x[i] = rgb_image(l_sample, ab_sample)
    
display_image(x[0])

"""Normalization"""

x = x.astype('float32')/256

def unnormalize(image):
    image = (image*256)
    return image.astype('uint8')

print(x[0])

display_image(x[230])

"""Architechture"""

import keras
import keras.layers
import keras.activations
import keras.optimizers
from keras.layers import ReLU
from matplotlib import pyplot as plt
from keras.initializers import RandomNormal, Zeros
from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Conv2DTranspose, concatenate
from keras.models import Model
from keras.optimizers import Adam
from keras.applications.vgg16 import VGG16
#from keras.callbacks import EarlyStopping, ModelCheckpoint

base_model = VGG16(input_shape = (224, 224, 3), include_top = False, weights = 'imagenet')

for layer in base_model.layers:
    layer.trainable = False

base_model.summary()
encoder = base_model

dec_input = Input((7,7,512))

dec_x = ReLU()(dec_input)

layer_dim = [512, 256, 128, 64, 32]

for i in layer_dim:
    dec_x = Conv2DTranspose(i, (2, 2), strides=(2, 2), padding='same', activation='relu')(dec_x)
    dec_x = Conv2D(i, 2, padding='same', activation='relu')(dec_x)

    
dec_x = Conv2D(3,2,padding='same',activation='sigmoid')(dec_x)

decoder = Model(inputs=[dec_input], outputs=[dec_x])
decoder.compile(optimizer='adam', loss='mse', metrics=['acc'])
decoder.summary()

model_out = decoder(encoder.output)
encoder.trainable=False
model = Model(encoder.input, model_out)
model.compile(optimizer='adam', loss='mae', metrics=['acc'])
model.summary()

"""Training"""

trained_model = keras.models.load_model('/content/drive/MyDrive/Kaggle/colorization2.h5')

trained_model.fit(x, x, validation_split=0.2, batch_size=32, epochs= 25)
trained_model.save('/content/drive/MyDrive/Kaggle/colorization2.h5')

"""Loading Test Data"""

test_gray_scale = np.load('/content/drive/MyDrive/Kaggle/l/gray_scale.npy')[6000:6500]
print(test_gray_scale.shape)

"""Loading And Saving Expected Data"""

expected_ab_scale = np.load('/content/drive/MyDrive/Kaggle/ab/ab/ab1.npy')[6000:6500]

expected_rgb = np.zeros((500,224,224,3), dtype='uint8')

for i in range(500):
    l_sample = (test_gray_scale[i]).reshape((224,224,1))
    ab_sample = (expected_ab_scale[i])
    expected_rgb[i] = rgb_image(l_sample, ab_sample)
    
display_image(expected_rgb[0])

from keras.preprocessing.image import save_img
from keras.preprocessing.image import img_to_array

expected_path = "/content/drive/MyDrive/Kaggle/Test/Expected/" 

for i in range(500):
    img_array = img_to_array(expected_rgb[i])
    img_path = expected_path + str(i) + ".png"
    save_img(img_path, img_array)

"""Processing Test Data"""

def gray_3channels(gray):
    shape = (gray.shape[0], gray.shape[1], 3)
    zeros = np.zeros(shape)
    zeros[:, :, 0] = gray
    zeros[:, :, 1] = gray
    zeros[:, :, 2] = gray
    return zeros

test_x = np.zeros((500,224,224,3), dtype='uint8')
for i in range(500):
    test_x[i] = gray_3channels(test_gray_scale[i])

print(test_x.shape)

"""Normalize Test Data"""

test_x = test_x.astype('float32')/256

print(test_x[5])

"""Testing"""

def save_images(generator, samples):
    ab_values = generator.predict(samples)
    plt.figure()
    plt.set_cmap('gray')
    rgb = np.zeros((size,224,224,3), dtype='uint8')
    for i in range(ab_values.shape[0]):
        rgb[i] = unnormalize(ab_values[i])
        display_image(rgb[i])
        display_image(samples[i])
        ax = plt.subplot(224, 224, i+1)
        im = ax.imshow(rgb[i])
        plt.tight_layout()
        plt.title(i)
    plt.show()
    return rgb

size = 500
test_result = save_images(trained_model,test_x[0:size])

display_image(test_x[6])
display_image(test_result[6])

"""Saving Images"""

from keras.preprocessing.image import save_img
from keras.preprocessing.image import img_to_array
#from keras.preprocessing.image import load_img

input_path = "/content/drive/MyDrive/Kaggle/Test/Input/"
predicted_path = "/content/drive/MyDrive/Kaggle/Test/Predicted/" 

for i in range(size):
    img_array = img_to_array(test_result[i])
    img_path = predicted_path + str(i) + ".png"
    save_img(img_path, img_array)

for i in range(size):
    img_array = img_to_array(test_x[i])
    img_path = input_path + str(i) + ".png"
    save_img(img_path, img_array)

# image = load_img('/content/drive/MyDrive/Kaggle/Test/Predicted/1.png')

# display_image(image)